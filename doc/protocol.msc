#-*-mode: wsd-*-
# This file describes the interaction between the Controller, Server and User.
# You can render it nicely on www.websequencediagrams.com.

title `Controller<->Server<->User' protocol

participant Controller as c
participant Server as s
participant User as u

note over c,s,u
    Each server has multiple controllers. A controller is used per channel while a client connects
    to a session, which has multiple channels. A server can be used to manage multiple channels.
end note

opt Startup
    note over c, s
        Create a docker giving the controller an unique integer id.
    end note
    c->s: GET: /im_alive, {id: integer}
end

opt Setup
    note over c,s,u
        These operations can be can be reordered at will.
    end note

    opt Music management
        opt Add Music
            u->+s: Add music file in control panel
            s->u: Update music overview to pending
            s->+c: POST: /add_music, {'file_location' : string}
            c->-s: done
            s->-u: Update music overview
        end

        opt Delete Music
            u->+s: Delete music file from control panel
            s->-u: Update music overview
            s->c: POST: /delete_music, {'file_location' : string}
            note left of c
                file_location should be the same as in
                /add_music
            end note
        end
    end

    opt Configuration getters
        opt General config
            s->+c: POST: /possible_classes, {'parts': [options in 'controller', 'picker', 'transitioner', 'communicator']}
            c->-s: {part: options for part in parts}
        end

        opt Specific config
            s->+c: POST: /possible_variables, {'part': string, 'option': string}
            note left of s
                The option has to be present in the result from 'possible_classses'.
            end note
            c->-s: {variable: {docstring: string, required : bool, fixed: bool} for variable in variables_for_part_option}
            note left of c
                Fixed means the option is not configurable.
            end note
        end
    end
end

opt Session Starting
    u->s: Presses start button or automatically at session.start
    s->+c: POST: /start, {'output_dir' : string }
    note left of c
        Epoch is the end of the creation of the
        first example
    end note
    c->-s: REPLY: {'epoch': integer}
end

opt During Playback
    opt Feedback Handling
        u->s: POST: /log_data, feedback
        c->+s: GET: /get_feedback?start=$start&end=$end&id=$id
        u->s: POST: /log_data, feedback
        note left of s
            `time_left_channel' should be an integer
            offset from `$start'. If the user did not
            leave the channel before `$end' it SHOULD
            be included in the JSON object and its
            value should be `NULL'.
        end note
        u->s: POST: /log_data, feedback
        s->-c: {'feedback': {user: time_left_channel for each user on channel at $start}}
        u->s: POST: /log_data, feedback
    end

    opt Iteration
        c->s: POST: /iteration, {'file_mixed': string, 'id': integer}
        note left of c
            file_mixed should be the same as in
            /add_music
        end note
    end
end

opt Session stopping
    u->+s: Presses stop button or automatically at session.end
    note left of s
        Kill docker instance
    end note
    s->-u: Update overview
end
