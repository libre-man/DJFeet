#-*-mode: wsd-*-
# This file describes the interaction between the Controller, Server and User.
# You can render it nicely on www.websequencediagrams.com.
title `Controller<->Server<->User' protocol
participant Controller as c
participant Server as s
participant User as u
note over c,s,u
    Each server has multiple controllers. A controller is used per channel while a client connects
    to a session, which has multiple channels. A server can be used to manage multiple channels.
end note
opt Startup
    note over c, s
        Create a docker giving the controller an unique integer id and the server web address.
        This is done by giving the start script of the controller 2 command line arguments when starting:
        `--id integer --server string`
    end note
    note left of c
        `options` should be contain possible option possible
        in the lifetime of this controller.
        Subjects are all the parts of the controller:
        [picker, transitioner, communicator, controller]
        `option` is of the type:
        {doc: string, required: bool, fixed: bool}
    end note
    c->s: POST: /im_alive/, {id: integer, options: {subject: {parts: {part: {part_option: option in part_options} in parts}, doc: {short: string, long: string}} in subjects}}
end
opt Setup
    note over c,s,u
        These operations can be reordered at will.
    end note
    opt Music management
        opt Add Music
            u->+s: Add music file in control panel
            s->u: Update music overview to pending
            s->+c: POST: /add_music/, {file_location: string, id: integer}
            c->-s: {ok: bool}
            c->s: POST: /music_processed/, {id: integer}
            s->-u: Update music overview
        end
        opt Delete Music
            u->+s: Delete music file from control panel
            s->u: Update music overview to pending
            s->+c: POST: /delete_music/, {file_location: string}
            c->-s: {ok: bool}
            note left of c
                file_location should be the same as in
                /add_music
            end note
            c->s: POST: /music_deleted/, {id: integer}
            s->-u: Update music overview
        end
    end
    opt Setting configuration
        u->+s: Set channel options in control panel
        s->+c: POST: /set_config/, {subject: {name: string, options: {part_option: value in part_options}} in subjects}
        c->-s: {ok: bool}
        s->-u: Return to channel detail screen and lock options
    end
end
opt Session Starting
    u->s: Presses start button or automatically at session.start
    s->+c: POST: /start/, {}
    c->-s: {ok: bool}
    note left of c
        Epoch is the end of the creation of the
        first example
    end note
    c->s: POST: /controller_started/: {id: integer, epoch: integer}
end
opt During Playback
    opt Feedback Handling
        u->s: POST: /log_data/, feedback
        c->+s: POST: /get_feedback/, {start: integer, end: integer, id: integer}
        u->s: POST: /log_data/, feedback
        note left of s
            `time_left_channel' should be an integer
            offset from `$start'. If the user did not
            leave the channel before `$end' it SHOULD
            be included in the JSON object and its
            value should be `NULL'.
        end note
        u->s: POST: /log_data/, feedback
        s->-c: {feedback: {user: time_left_channel for channel at $start}}
        u->s: POST: /log_data/, feedback
    end
    opt Iteration
        c->s: POST: /iteration/, {file_mixed: string, id: integer}
        note left of c
            file_mixed should be the same as in
            /add_music
        end note
    end
end
opt Session stopping
    u->+s: Presses stop button or automatically at session.end
    note left of s
        Kill docker instance
    end note
    s->-u: Update overview
end
